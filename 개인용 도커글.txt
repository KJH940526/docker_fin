https://docs.docker.com/reference/				도커 공식사이트

-----------------------------------------------------------------------------------
docker-machine 					//https://nirsa.tistory.com/85

docker-machine ip default  -> 도커 아이피 확인     virtual box를 사용하는 docker tool box에서만 사용가능

** docker의 모든 명령어는 소문자로 하는게 기준 => DOCKER IMAGES 라고 치면 그런 명령어 없다고 뜸


0) 도커


1)Dockerfile

1.1) dockerfile은 무엇인가?
  Dockerfile은 dockerimage를 설정하기 위한 파일이다.  
  dockerfile은 확장자가 없다!


1.2) dockerfile 설정법 (꼭 필요한것만 적음 추가적인건 알아서 하기!)

내가 도커 파일에서 썻던거는 * 표시 해둠
 

1.2.1) FROM			*****

FROM은 어떤 이미지를 기반으로 이미지를 생성할지 설정한다. dockerfile로 이미지를 생성할 떄는 항상 기존에 있는
이미지를 기반으로 생성하기 떄문에 from은 반드시 설정해야한다.

FROM <이미지> 또는 FROM <이미지>:<태그>

ex) FROM node:12.18.1

1.2.2) RUN			*****

RUN은 FROM에서 설정한 이미지 위에서 스크립트 혹은 명령을 실행한다. 여기서 RUN으로 실행된 결과가 새 이미지를 생성한다.

ex) RUN npm install --silent


1.2.3) CMD			*****

CMD는 컨테이너가 시작되었을 떄 스크립트 혹은 명령을 실행합니다. (RUN이랑 비교해서 보기!)
즉, docker run 명령으로 컨테이너를 생성하거나, docker start 명령으로 정지된 컨테이너를 시작할 때 실행됩니다.

ex) CMD [ "npm","start" ]


1.2.4) EXPOSE			*****

EXPOSE는 호스트와 연결할 포트 번호를 설정합니다. docker run 명령의 --expose 옵션과 동일하다.

ex) EXPOSE 3000 형식입니다. EXPOSE 하나로 포트 번호를 두 개 이상 동시에 설정할 수도 있습니다.
EXPOSE는 호스트와 연결만 할 뿐 외부에 노출은 되지 않습니다. 포트를 외부에 노출할려면 docker run 명령의 -p 옵션을 사용해야한다.

ex) docker run -p 80:3000 <이미지 id>


1.2.5) ENV			*****

ENV는 환경 변수를 설정합니다. ENV로 설정한 환경 변수는 RUN,CMD에 적용됩니다.

ENV <환경 변수> <값> 형식입니다. 환경 변수를 사용할 때는 $를 사용하면 됩니다.

EX) ENV PATH /app/client/node_modules/.bin:$PATH


추가로 환경 변수는 docker run 명령에서도 설정할 수 있습니다. 
-e <환경 변수>=<값> 형식입니다. -e 옵션은 여러 번 사용할 수 있고, --env 옵션과 같습니다. 
근데 dockerfile에서 설정하는게 정신건강에 이롭습니다.


1.2.6) ADD

ADD는 파일을 이미지에 추가합니다. 

ADD <복사할 파일 경로> <이미지에서 파일이 위치할 경로> 형식입니다. ** 절대 경로는 사용할 수 없습니다.

COPY에서 예제로 대체함


1.2.7) COPY		*****

COPY는 파일을 이미지에 추가합니다. ADD와는 달리 COPY는 압축 파일을 추가할 때 압축을 해제하지 않고, 파일 URL도 사용할 수 없습니다.

COPY <복사할 파일 경로> <이미지에서 파일이 위치할 경로>


<복사할 파일 경로>는 파일뿐만 아니라 디렉터리도 설정할 수 있으며, 디렉터리를 지정하면 디렉터리의 모든 파일을 복사합니다.
 또한, 와일드카드(*) 를 사용하여 특정 파일만 복사할 수 있습니다.

EX) COPY package*.json ./



1.2.8) VOLUME 

VOLUME은 디렉터리의 내용을 컨테이너에 저장하지 않고 호스트에 저장하도록 설정합니다.

VOLUME <컨테이너 디렉터리> 또는 VOLUME ["컨테이너 디렉터리 1", "컨테이너 디렉터리2"] 형식입니다. 


1.2.9) WORKDIR			*****


WORKDIR은 RUN, CMD, ENTRYPOINT의 명령이 실행될 디렉터리를 설정합니다.

WORKDIR <경로> 형식입니다.

WORKDIR 뒤에 오는 모든 RUN, CMD에 적용되며, 중간에 다른 디렉터리를 설정하여 실행 디렉터리를 바꿀 수 있습니다.

EX) 
WORKDIR /TIGER       (tiger 디렉토리)

RUN touch hello.txt

WORKDIR /LION      (LION 디렉토리)

RUN touch hello.txt  


내가 작성한 dockerfile ***********************
------------------------------------------------------------------------------------------------------------------------

FROM node:12.18.1				//기본 이미지 파일 설정

WORKDIR /app/client				//명령이 실행될 디렉터리를 설정

ENV PATH /app/client/node_modules/.bin:$PATH	//환경 변수 설정

COPY package*.json ./				//package*.json ./ 복사

RUN npm install --silent				//이미지가 생성되면서 스크립트 실행

COPY . . 						//모든 파일 COPY

EXPOSE 3000					//호스트와 연결할 포트번호 설정

CMD [ "npm","start" ]				//컨테이너가 작동할 떄 실행되는 명령 설정!


------------------------------------------------------------------------------------------------------------------


1.3) docker-compose는 무엇인가?

dockerfile을 동시에 한 파일에 묶어 둔거라고 보면 편한다.
각 컨테이너들을 실행 시키기 위해서는 docker run 명령어를 이용하여 컨테이너를 생성하려면 
두 번의 run 명령어 입력이 필요한데! 그러한 번거로움을 해결해준다.


1.4) docker-compose.yaml 설정법

docker-compose.yaml에서도 위의 dockerfile처럼 설정이 가능하지만
위에서 이미 dockerfile을 설정하였기 떄문에 이번에는 묶어주기만 한다.


1.4.1) version

docker-compose 파일의 제일 윗부분에 파일 규격 버전을 적어야한다.

1.4.2) service

이 항목 밑에 실행하려는 서비스들을 정의한다. 쉽게 말하면 각각의 묶음

1.4.3) ports

도커 컨테이너와 비슷하게 네트워크가 만들어지면 네트워크 외부의 접근을 차단한다. 그렇기 떄문에
접글할 수 있는 포트를 지정해주어야한다.


1.4.4) 추가로 알아두면 좋은 설정들

depends_on   => 서비스가 하나 이상일 떄, 실행 의존성을 가지게 된다.


links => 앱 서비스에서 db서비스를 찾게해줌, 단 version 3부터는 항목을 사용하지 않더라도 네트워크 안에 있는 서비스끼리
서로 통신을 할 수 있기 떄문에 굳이 쓰지 않아도 상관없지만 알아둘것.

나중에 db할떄 참고하기




1.4.5) 내가 설정한 docker-compose.yaml 파일
---------------------------------------------------------------------------------------------------------------------------------

services:

  client:					//이름
    build: ./client/				//그냥 build라고 생각하면 편함 ./clinet/는 명령을 실행할 디랙토리
    ports:
      - '3000:3000'

      
  server:
    build: ./server/ 
    ports:
      - '5000:5000'


---------------------------------------------------------------------------------------------------------------------------------
** dockerfile를 배표용이나 다른 버전으로 이미지를 생성하고 싶을 때 사용한다.

services:
  clinet:
    build:
      context: ./client/			//    context는  docker build 명령을 실행할 디렉터리 경로
      dockerfile: ./client/Dockerfile-dev            //    dockerfile는  dockerfile 파일이 있는 위치



---------------------------------------------------------------------------------------------------------------------------------

1.4.6) docker-compose 명령어

docker-compose build        이미지만 빌드하고 컨테이너를 시작하지 않습니다.

docker-compose up           이미지가 존재하지 않는 경우 이미지를 빌드하고 컨테이너를 시작합니다.

docker-compose up --build      --build 옵션을 추가하면 필요하지 않는 경우에도 이미지를 빌드한다.



1.5) 불확실한 정보    (확인해보지는 못했지만, 수정하고 진행하였음)

1.5.1) webpack 변경하기

CRA로 리액트를 생성했을 경우 웹팩을 수정해줘야 하는데, 
CRA로 만들어진 client에서 이루어진다.
자세한 경로는 client - node_modules - react-scripts > config > webpackdevserver.config.js
에서 public을 수정  public: "0.0.0.0" 수정함

https://www.robinwieruch.de/docker-react-development

https://dev.to/azawakh/don-t-forget-to-give-host-0-0-0-0-to-the-startup-option-of-webpack-dev-server-using-docker-1483

https://www.it-swarm-ko.tech/ko/networking/127001%ea%b3%bc-0000%ec%9d%98-%ec%b0%a8%ec%9d%b4%ec%a0%90%ec%9d%80-%eb%ac%b4%ec%97%87%ec%9e%85%eb%8b%88%ea%b9%8c/958652984/



1.6) 여러가지 링크

https://dico.me/server/articles/259              						 //dockerfile 작성하기

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter04/02 			//dockerfile 작성하기

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/07			//EXPOSE

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/09			//ADD

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/10			//COPY

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/11			//VOLUME

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/13			//WORKDIR

https://nirsa.tistory.com/79								//docker-compose 문법정리   79번부터 81번글 보기

//docker-compose 정리
https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose#docker-compose.yml-%ED%8C%8C%EC%9D%BC

// docker-compse 문법정리 links 	db할떄 필요할듯!!
https://hoony-gunputer.tistory.com/entry/docker-compose-yaml-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1

https://galid1.tistory.com/324							//docker hub 사용법

http://blog.naver.com/PostView.nhn?blogId=alice_k106&logNo=220340499760		//docker run 옵션

https://blog.naver.com/alice_k106							//docker network 구조

https://zzsza.github.io/development/2018/04/17/docker-kubernetes/			//docker 정리글

https://ooeunz.tistory.com/61?category=821628						//docker 카테고리의 다른글도 참고하기 ** AWS에 배포하기

https://bluese05.tistory.com/15							//docker 구조                  다른 글도 보기

https://velog.io/@melangyun/Docker-compose.yml-DB%EC%99%80-%EC%97%B0%EA%B2%B0		//docker DB 연결

https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach            // -network="host" 읽어보기

https://bluese05.tistory.com/36							//컨테이너 IP확인

http://raccoonyy.github.io/docker-usages-for-dev-environment-setup/			//DOCKER-COMPOSE 활용법

https://nickjanetakis.com/blog/docker-tip-65-get-your-docker-hosts-ip-address-from-in-a-container	//컨테이너에서 도커 호스트 ip 가져오기

https://joont92.github.io/docker/network-%EA%B5%AC%EC%A1%B0/				//docker network 구조

https://sungwookkang.com/1305								//docker compose 설명

https://swiftymind.tistory.com/83								//docker netwrok 설명

https://novemberde.github.io/2017/04/01/Docker_3.html					//EC2에서 Docker설치하고 Ubuntu유저에게 권한주기

--------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------------------------------
/// docker compose로 이미지 파일을 생성할 예정이므로 시간이 없다면 2.2)부터 봐도 무관하다. 근데 보셈 ㄹㅇ

2) build 

2.1) build 명령으로 이미지 생성하기
DockerFile이 저장된(*****) example 디렉토리에서 build 명령을 실행한다.

docker build <옵션> .       * . 찍어야함
--tag 옵션으로 이미지 이름과 태그를 설정할 수 있다.  안하면 자동으로 도커가 만들어줌

ex) docker build --tag hello:0.1 .


2.2) images 명령으로 생성된 이미지 확인하기

ex) docker images 


2.3) rmi 명령어로 생성된 이미지 삭제하기

2.3.1) 실행중인 컨테이너가 없는 이미지 삭제하기 
   ex) docker rmi <IMAGE ID>


2.3.2) 실행중인 컨테이너가 있는 이미지 강제 삭제하기
   ex) docker rmi <IMAGE ID> -f

생성되어 있는 이미지를 전부 삭제하고 싶을떄는
   ex) docker rmi $(docker images) -f     * 여기서 -f는 강제 삭제
같은 방식으로도 가능하다



3) run

3.1) run 명령으로 컨테이너 생성하기

docker run <옵션> <IMAGE ID> <실행할 파일>   ** <옵션>, <실행할 파일>은 없으면 안해도 됨

ex) docker run -d -p 80:3000 --rm <IMAGE ID>
-p 옵션은 포트번호 80:3000는 호스트의 80번 포트와 컨테이너 3000번 포트를 연결하고 외부에 노출한다는 의미
-d 컨테이너를 백그라운드로 실행함 (* 클라이언트를 실행할떄 쓰면 좋음)
--rm 컨테이너가 중지되면 자동으로 컨테이너 삭제


3.2) ps 명령으로 생성된 컨테이너 확인하기

ex) docker ps                   // (실행중인 컨테이너 보기)
    
ex) docker ps -a               // (정지중인 컨테이너까지 보기)



3.3) 생성된 컨테이너 삭제하기

ex) docker rm <CONTAINER ID>           //정지중인 컨테이너만 삭제 가능

ex) docker rm <CONTAINER ID> -f       //실행중인 컨테이너까지 강제 삭제

ex) docker rm $(docker ps -a) -f         //실행중인 컨테이너까지 모두 삭제



4) start 명령으로 컨테이너 시작하기

ex) docker start <CONTAINER ID>로 컨테이너 시작하기




5) attach 명령으로 컨테이너에 접속하기

ex) docker attach <CONTAINER ID>    

//컨테이너 안에서 작업할 떄 사용한다. ex) 컨테이너 안에서 컨테이너 생성하기
DIND



/*  //안 쓸꺼임!
6)exac 명령으로 외부에서 컨테이너 안의 명령 실행하기
현재 컨테이너가 /bin/bash로 실행된 상태. 이번에는 /bin/bash를 통하지 않고 외부에서 컨테이너 안의 명령을 실행

docker exec <컨테이너 이름> <명령> <매개 변수> 형식임
ex) docker exec tiger echo "Hello world"
여기서 echo는 문자열을 컴퓨터 터미널에 출력하는 명령어 **
docker exec 명령은 이미 실행된 컨테이너에 apt-get, yum 명령으로 패키지를 설치하거나, 각종 파일을 실행할 때 활용 가능
*/



7) stop 명령으로 컨테이너 정지하기
docker stop <CONTAINER ID>


**********************************************
8) docker hub에 image 올리기

8.1) 도커 이미지 이름 변경하는 방법

8.1.1) docker images로 REPOSITORY와 TAG를 확인한다.

8.1.2) docker tag <REPOSITORY>:<TAG> <바꿀 REPOSITORY>:<바꿀 TAG>

ex) docker images로 검색했을 떄 REPOSITORY 이름이 TIGER이고 TAG가 LION 이미지가 있다고 가정한다.

docker tag <tiger>:<lion> <dog>:<cat> 으로 바꾸면 doc라는 REPOSITORY 이름을 가지고 cat이라는 TAG를 가지게 된다.
**(대문자로 하면 안되는거 같음)


8.2) 도커 허브에 이미지 올리기 / 내려받기

 8.2.1) docker hub에서 REPOSITORY를 생성     
 
 **(도커 허브의 유저 아이디는 bitfront로 계정을 생성했다고 가정한다)
 **(도커 허브의 REPOSITORY 이름을 tiger라고 지었다고 가정한다) 


 8.2.2) docker tag로 설정하기     **(도커 REPOSITORY 이름은 doc_server가 있고 TAG는 latest라는 이미지 파일이 있다고 가정) 
  
  설정법) docker tag <REPOSITORY>:<TAG> <유저ID/도커허브 REPOSITORY이름>:<태그>
  ex) docker tag doc_server:latest bitfront/tiger:server                                   
  ex) docker tag doc_client:latest bitfront/tiger:client         **도커허브에서 구분할 예정이기 때문에 태그 이름은 알아보기 쉽게 적기


 8.2.3) docker push로 도커허브에 이미지 올리기
  ex) docker push bitfront/tiger:server

  로 올리면 도커 허브에 페이지에 server라는 태그를 가진  이미지가 생성됨


 8.2.4) docker search [옵션] <검색어> 
  근데 cli 환경에서 하지말고 그냥 도커허브 웹 사이트에서 검색하자!   


 8.2.5) docker pull로 도커허브에서 이미지 내려받기
  ex) docker pull bitfront/tiger:server

  로 내려받기가 가능하고 docker images로 확인해보기!




----------------------------------------------------------------------------------------------------------------
9) AWS EC2에서 DOCKER로 배포하기

 9.1) 보안 그룹 구성
  9.1.1) SSH                        -> 
     9.1.1.1)SSH란 무엇인가?

  9.1.2) HTTP/ HTTPS             ->  80   /   443
    9.1.2.1)HTTP/HTTPS는 무엇인가?
  
  9.1.3) Server / Client            -> 5000 / 3000
	** Server는 EC2상에서 로컬호스트니깐 필요가 없을것 같지만 일단은 적어줌

  9.1.4) 기타포트 설정 


 9.2) Mobaxterm을 이용해서 들어가기

  9.2.1) Session 메뉴 -> SSH -> Remote host에 (EC2 IPv4 퍼블릭 IP) 
	
	-> Advanced SSH settings에서 Use private key 설정 -> key파일은 EC2 인스턴스에서 확인가능

	-> 키 이름에 맞는 key.pem을 설정하고 실행한다.

  9.2.2) login as : ubuntu로 로그인 => ID랑 같음


  9.2.3) sudo apt update && sudo apt upgrade로 업데이트 및 업그레이드 하기

        Do you want to continue? 라고 나오면 당연히 y 해주고 패치가 진행되다가 

        선택창이 나오는데 install the packege maintainer's version을 설치했다. 


  9.2.4) key pair 없이도 들어가게 설정
   
   sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

   sudo /etc/init.d/ssh restart 로 재시작하기

  9.2.5) ubuntu 비밀번호 설정하기
	sudo passwd <비밀번호>

  9.2.5.1) key pair를 설정하지 않고 Seesion메뉴에서 실행
	logins as : ubuntu           // ID라고 생각하면 됨
	password : <비밀번호>    // 위에서 설정한 비밀번호

  9.2.6) root 관리자 로그인 
      su -   명령어로 관리자 로그인하고 Password:<비밀번호> 입력하기

----------------------------여기서부터 루트 계정-------------------------------------------------------

  9.2.7) apt-get update && apt-get upgrade 업데이트 및 업그레이드 하기

  9.2.8) apt install docker.io 로 docker install 하기

  9.2.3) docker pull <유저아이디/레포지토리>:<태그>로 도커허브에서 이미지 다운받기

  9.2.4) docker run을 통해서 배포하기

   ex) docker run -it -d -p 5000:5000 --network="host"  <서버 IMAGE ID>

       docker run -it -d -p 3000:3000 --network="host"  <클라이언트 IMAGE ID>


** --network="host"를 쓰는 이유는 Docker host IP로 묶기 위해서 사용한다.  
    위와 같은 방법을 쓰기 싫으면 컨테이너 안에서 위와 같은 방법으로 묶어줘야한다.
    근데 일단은 --network="host"를 사용하자!!

---------------------------------------------------------------------------------------------------------

이제 도커는 끝!!!

추가로 알아볼 것

SVN
젠킨스



--------------------------------------------------------------------------------------------------------

--------- 더 알아봐야할 것 ------------------
도커 클라언트 컨테이너에서 ip 설정하기 -> 도커 서버 ip로 설정하기
컨테이너마다 ip가 또 따로 있기 떄문에 설정해줘야함

docker run -it -p 3000:3000 --network="host" <이미지 id>
p:80으로 했는데도 3000 포트로 연결됨. 도커파일에서 export를 80 포트로 해보거나,
도커안에 도커를 만들어서 실행해보기

도커안에 컨테이너에서 호스트 --network 호스트 확인해보기

도커허브랑 깃허브랑 연동하기 **


PM2 서버를 이용해서 배포하기는 방법
https://novemberde.github.io/2017/04/02/Docker_6.html
https://medium.com/extales/node-js-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-3-ce7cf71ce874
https://netframework.tistory.com/entry/nodejs-pm2-git%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-Dockfile-%EA%B5%AC%EC%84%B1


PM2 알아보기
https://www.google.com/search?q=PM2%EB%9E%80%3F&oq=PM2%EB%9E%80%3F&aqs=chrome..69i57j0l4j69i58.2335j0j7&sourceid=chrome&ie=UTF-8


PM2를 구글검색해보기 
---------------------------------------------------------------------------------------------------------------

???  아직 검증 안된 칭구들 

https://oofbird.tistory.com/50      //react port 설정하기  -> 도커에서 실행포트를 바꾸는데 도움?




